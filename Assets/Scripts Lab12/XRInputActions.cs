//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.13.0
//     from Assets/Scripts Lab12/XRInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

/// <summary>
/// Provides programmatic access to <see cref="InputActionAsset" />, <see cref="InputActionMap" />, <see cref="InputAction" /> and <see cref="InputControlScheme" /> instances defined in asset "Assets/Scripts Lab12/XRInputActions.inputactions".
/// </summary>
/// <remarks>
/// This class is source generated and any manual edits will be discarded if the associated asset is reimported or modified.
/// </remarks>
/// <example>
/// <code>
/// using namespace UnityEngine;
/// using UnityEngine.InputSystem;
///
/// // Example of using an InputActionMap named "Player" from a UnityEngine.MonoBehaviour implementing callback interface.
/// public class Example : MonoBehaviour, MyActions.IPlayerActions
/// {
///     private MyActions_Actions m_Actions;                  // Source code representation of asset.
///     private MyActions_Actions.PlayerActions m_Player;     // Source code representation of action map.
///
///     void Awake()
///     {
///         m_Actions = new MyActions_Actions();              // Create asset object.
///         m_Player = m_Actions.Player;                      // Extract action map object.
///         m_Player.AddCallbacks(this);                      // Register callback interface IPlayerActions.
///     }
///
///     void OnDestroy()
///     {
///         m_Actions.Dispose();                              // Destroy asset object.
///     }
///
///     void OnEnable()
///     {
///         m_Player.Enable();                                // Enable all actions within map.
///     }
///
///     void OnDisable()
///     {
///         m_Player.Disable();                               // Disable all actions within map.
///     }
///
///     #region Interface implementation of MyActions.IPlayerActions
///
///     // Invoked when "Move" action is either started, performed or canceled.
///     public void OnMove(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnMove: {context.ReadValue&lt;Vector2&gt;()}");
///     }
///
///     // Invoked when "Attack" action is either started, performed or canceled.
///     public void OnAttack(InputAction.CallbackContext context)
///     {
///         Debug.Log($"OnAttack: {context.ReadValue&lt;float&gt;()}");
///     }
///
///     #endregion
/// }
/// </code>
/// </example>
public partial class @XRInputActions: IInputActionCollection2, IDisposable
{
    /// <summary>
    /// Provides access to the underlying asset instance.
    /// </summary>
    public InputActionAsset asset { get; }

    /// <summary>
    /// Constructs a new instance.
    /// </summary>
    public @XRInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""XRInputActions"",
    ""maps"": [
        {
            ""name"": ""XRControls"",
            ""id"": ""e8b7b6af-7bb9-4171-b868-f5fda54103af"",
            ""actions"": [
                {
                    ""name"": ""PrimaryButton"",
                    ""type"": ""Button"",
                    ""id"": ""f83c91e8-54d0-4a9c-b807-75d4052a1352"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondaryButton"",
                    ""type"": ""Button"",
                    ""id"": ""28375fa2-7c07-4dba-a11e-a5d97b4d4b77"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GripButton"",
                    ""type"": ""Button"",
                    ""id"": ""905c144b-555a-4eae-8d7d-5bfe1d28f4c1"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""TriggerButton"",
                    ""type"": ""Button"",
                    ""id"": ""3e3c429c-ec09-4611-85bd-a9b846e58344"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MenuButton"",
                    ""type"": ""Button"",
                    ""id"": ""e4423128-e676-4abe-a434-8247a59c0fe4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftJoystick"",
                    ""type"": ""Value"",
                    ""id"": ""9bdbc17c-751d-481c-be4f-65598378db27"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Joystick"",
                    ""type"": ""Value"",
                    ""id"": ""72839b9b-078e-4a64-b6de-5cc23648511d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""GripValue"",
                    ""type"": ""Value"",
                    ""id"": ""f50ad0a5-0000-4e5c-92ef-2e3eaef7c982"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""TriggerValue"",
                    ""type"": ""Value"",
                    ""id"": ""30f325b2-194e-44a5-92bb-fb0ed8da78c5"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""867b87af-965a-4816-8854-0276390d4719"",
                    ""path"": ""<XRController>{RightHand}/primaryButton "",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e0fd93d-81bf-4a8b-996d-cae756b7fe4a"",
                    ""path"": ""<XRController>{RightHand}/secondaryButton "",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondaryButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""86014aec-6537-47f8-9577-b98bce98acdf"",
                    ""path"": ""<XRController>{RightHand}/gripButton "",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GripButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b58a0414-fd08-41ea-b26b-1c5a9a06a6e3"",
                    ""path"": ""<XRController>{RightHand}/triggerButton "",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TriggerButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9f9cd645-1788-4ce1-9e23-f69e69633e91"",
                    ""path"": ""<XRController>{RightHand}/menuButton "",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MenuButton"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""395c48e8-40c9-4e9b-b003-870086f4265a"",
                    ""path"": ""<XRController>{RightHand}/thumbstick "",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Joystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0868e683-6bdb-4464-8dca-2a1c75f7aac0"",
                    ""path"": ""<XRController>{RightHand}/grip "",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GripValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""171f9111-8ee4-42f8-9ddd-f9fab80b2bc9"",
                    ""path"": ""<XRController>{RightHand}/trigger  "",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TriggerValue"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5fd269e4-a5b4-4d85-9f71-06ed70e805ee"",
                    ""path"": ""<XRController>{LeftHand}/thumbstick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftJoystick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // XRControls
        m_XRControls = asset.FindActionMap("XRControls", throwIfNotFound: true);
        m_XRControls_PrimaryButton = m_XRControls.FindAction("PrimaryButton", throwIfNotFound: true);
        m_XRControls_SecondaryButton = m_XRControls.FindAction("SecondaryButton", throwIfNotFound: true);
        m_XRControls_GripButton = m_XRControls.FindAction("GripButton", throwIfNotFound: true);
        m_XRControls_TriggerButton = m_XRControls.FindAction("TriggerButton", throwIfNotFound: true);
        m_XRControls_MenuButton = m_XRControls.FindAction("MenuButton", throwIfNotFound: true);
        m_XRControls_LeftJoystick = m_XRControls.FindAction("LeftJoystick", throwIfNotFound: true);
        m_XRControls_Joystick = m_XRControls.FindAction("Joystick", throwIfNotFound: true);
        m_XRControls_GripValue = m_XRControls.FindAction("GripValue", throwIfNotFound: true);
        m_XRControls_TriggerValue = m_XRControls.FindAction("TriggerValue", throwIfNotFound: true);
    }

    ~@XRInputActions()
    {
        UnityEngine.Debug.Assert(!m_XRControls.enabled, "This will cause a leak and performance issues, XRInputActions.XRControls.Disable() has not been called.");
    }

    /// <summary>
    /// Destroys this asset and all associated <see cref="InputAction"/> instances.
    /// </summary>
    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindingMask" />
    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.devices" />
    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.controlSchemes" />
    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Contains(InputAction)" />
    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.GetEnumerator()" />
    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    /// <inheritdoc cref="IEnumerable.GetEnumerator()" />
    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Enable()" />
    public void Enable()
    {
        asset.Enable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.Disable()" />
    public void Disable()
    {
        asset.Disable();
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.bindings" />
    public IEnumerable<InputBinding> bindings => asset.bindings;

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindAction(string, bool)" />
    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    /// <inheritdoc cref="UnityEngine.InputSystem.InputActionAsset.FindBinding(InputBinding, out InputAction)" />
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // XRControls
    private readonly InputActionMap m_XRControls;
    private List<IXRControlsActions> m_XRControlsActionsCallbackInterfaces = new List<IXRControlsActions>();
    private readonly InputAction m_XRControls_PrimaryButton;
    private readonly InputAction m_XRControls_SecondaryButton;
    private readonly InputAction m_XRControls_GripButton;
    private readonly InputAction m_XRControls_TriggerButton;
    private readonly InputAction m_XRControls_MenuButton;
    private readonly InputAction m_XRControls_LeftJoystick;
    private readonly InputAction m_XRControls_Joystick;
    private readonly InputAction m_XRControls_GripValue;
    private readonly InputAction m_XRControls_TriggerValue;
    /// <summary>
    /// Provides access to input actions defined in input action map "XRControls".
    /// </summary>
    public struct XRControlsActions
    {
        private @XRInputActions m_Wrapper;

        /// <summary>
        /// Construct a new instance of the input action map wrapper class.
        /// </summary>
        public XRControlsActions(@XRInputActions wrapper) { m_Wrapper = wrapper; }
        /// <summary>
        /// Provides access to the underlying input action "XRControls/PrimaryButton".
        /// </summary>
        public InputAction @PrimaryButton => m_Wrapper.m_XRControls_PrimaryButton;
        /// <summary>
        /// Provides access to the underlying input action "XRControls/SecondaryButton".
        /// </summary>
        public InputAction @SecondaryButton => m_Wrapper.m_XRControls_SecondaryButton;
        /// <summary>
        /// Provides access to the underlying input action "XRControls/GripButton".
        /// </summary>
        public InputAction @GripButton => m_Wrapper.m_XRControls_GripButton;
        /// <summary>
        /// Provides access to the underlying input action "XRControls/TriggerButton".
        /// </summary>
        public InputAction @TriggerButton => m_Wrapper.m_XRControls_TriggerButton;
        /// <summary>
        /// Provides access to the underlying input action "XRControls/MenuButton".
        /// </summary>
        public InputAction @MenuButton => m_Wrapper.m_XRControls_MenuButton;
        /// <summary>
        /// Provides access to the underlying input action "XRControls/LeftJoystick".
        /// </summary>
        public InputAction @LeftJoystick => m_Wrapper.m_XRControls_LeftJoystick;
        /// <summary>
        /// Provides access to the underlying input action "XRControls/Joystick".
        /// </summary>
        public InputAction @Joystick => m_Wrapper.m_XRControls_Joystick;
        /// <summary>
        /// Provides access to the underlying input action "XRControls/GripValue".
        /// </summary>
        public InputAction @GripValue => m_Wrapper.m_XRControls_GripValue;
        /// <summary>
        /// Provides access to the underlying input action "XRControls/TriggerValue".
        /// </summary>
        public InputAction @TriggerValue => m_Wrapper.m_XRControls_TriggerValue;
        /// <summary>
        /// Provides access to the underlying input action map instance.
        /// </summary>
        public InputActionMap Get() { return m_Wrapper.m_XRControls; }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Enable()" />
        public void Enable() { Get().Enable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.Disable()" />
        public void Disable() { Get().Disable(); }
        /// <inheritdoc cref="UnityEngine.InputSystem.InputActionMap.enabled" />
        public bool enabled => Get().enabled;
        /// <summary>
        /// Implicitly converts an <see ref="XRControlsActions" /> to an <see ref="InputActionMap" /> instance.
        /// </summary>
        public static implicit operator InputActionMap(XRControlsActions set) { return set.Get(); }
        /// <summary>
        /// Adds <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <param name="instance">Callback instance.</param>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c> or <paramref name="instance"/> have already been added this method does nothing.
        /// </remarks>
        /// <seealso cref="XRControlsActions" />
        public void AddCallbacks(IXRControlsActions instance)
        {
            if (instance == null || m_Wrapper.m_XRControlsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_XRControlsActionsCallbackInterfaces.Add(instance);
            @PrimaryButton.started += instance.OnPrimaryButton;
            @PrimaryButton.performed += instance.OnPrimaryButton;
            @PrimaryButton.canceled += instance.OnPrimaryButton;
            @SecondaryButton.started += instance.OnSecondaryButton;
            @SecondaryButton.performed += instance.OnSecondaryButton;
            @SecondaryButton.canceled += instance.OnSecondaryButton;
            @GripButton.started += instance.OnGripButton;
            @GripButton.performed += instance.OnGripButton;
            @GripButton.canceled += instance.OnGripButton;
            @TriggerButton.started += instance.OnTriggerButton;
            @TriggerButton.performed += instance.OnTriggerButton;
            @TriggerButton.canceled += instance.OnTriggerButton;
            @MenuButton.started += instance.OnMenuButton;
            @MenuButton.performed += instance.OnMenuButton;
            @MenuButton.canceled += instance.OnMenuButton;
            @LeftJoystick.started += instance.OnLeftJoystick;
            @LeftJoystick.performed += instance.OnLeftJoystick;
            @LeftJoystick.canceled += instance.OnLeftJoystick;
            @Joystick.started += instance.OnJoystick;
            @Joystick.performed += instance.OnJoystick;
            @Joystick.canceled += instance.OnJoystick;
            @GripValue.started += instance.OnGripValue;
            @GripValue.performed += instance.OnGripValue;
            @GripValue.canceled += instance.OnGripValue;
            @TriggerValue.started += instance.OnTriggerValue;
            @TriggerValue.performed += instance.OnTriggerValue;
            @TriggerValue.canceled += instance.OnTriggerValue;
        }

        /// <summary>
        /// Removes <see cref="InputAction.started"/>, <see cref="InputAction.performed"/> and <see cref="InputAction.canceled"/> callbacks provided via <param cref="instance" /> on all input actions contained in this map.
        /// </summary>
        /// <remarks>
        /// Calling this method when <paramref name="instance" /> have not previously been registered has no side-effects.
        /// </remarks>
        /// <seealso cref="XRControlsActions" />
        private void UnregisterCallbacks(IXRControlsActions instance)
        {
            @PrimaryButton.started -= instance.OnPrimaryButton;
            @PrimaryButton.performed -= instance.OnPrimaryButton;
            @PrimaryButton.canceled -= instance.OnPrimaryButton;
            @SecondaryButton.started -= instance.OnSecondaryButton;
            @SecondaryButton.performed -= instance.OnSecondaryButton;
            @SecondaryButton.canceled -= instance.OnSecondaryButton;
            @GripButton.started -= instance.OnGripButton;
            @GripButton.performed -= instance.OnGripButton;
            @GripButton.canceled -= instance.OnGripButton;
            @TriggerButton.started -= instance.OnTriggerButton;
            @TriggerButton.performed -= instance.OnTriggerButton;
            @TriggerButton.canceled -= instance.OnTriggerButton;
            @MenuButton.started -= instance.OnMenuButton;
            @MenuButton.performed -= instance.OnMenuButton;
            @MenuButton.canceled -= instance.OnMenuButton;
            @LeftJoystick.started -= instance.OnLeftJoystick;
            @LeftJoystick.performed -= instance.OnLeftJoystick;
            @LeftJoystick.canceled -= instance.OnLeftJoystick;
            @Joystick.started -= instance.OnJoystick;
            @Joystick.performed -= instance.OnJoystick;
            @Joystick.canceled -= instance.OnJoystick;
            @GripValue.started -= instance.OnGripValue;
            @GripValue.performed -= instance.OnGripValue;
            @GripValue.canceled -= instance.OnGripValue;
            @TriggerValue.started -= instance.OnTriggerValue;
            @TriggerValue.performed -= instance.OnTriggerValue;
            @TriggerValue.canceled -= instance.OnTriggerValue;
        }

        /// <summary>
        /// Unregisters <param cref="instance" /> and unregisters all input action callbacks via <see cref="XRControlsActions.UnregisterCallbacks(IXRControlsActions)" />.
        /// </summary>
        /// <seealso cref="XRControlsActions.UnregisterCallbacks(IXRControlsActions)" />
        public void RemoveCallbacks(IXRControlsActions instance)
        {
            if (m_Wrapper.m_XRControlsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        /// <summary>
        /// Replaces all existing callback instances and previously registered input action callbacks associated with them with callbacks provided via <param cref="instance" />.
        /// </summary>
        /// <remarks>
        /// If <paramref name="instance" /> is <c>null</c>, calling this method will only unregister all existing callbacks but not register any new callbacks.
        /// </remarks>
        /// <seealso cref="XRControlsActions.AddCallbacks(IXRControlsActions)" />
        /// <seealso cref="XRControlsActions.RemoveCallbacks(IXRControlsActions)" />
        /// <seealso cref="XRControlsActions.UnregisterCallbacks(IXRControlsActions)" />
        public void SetCallbacks(IXRControlsActions instance)
        {
            foreach (var item in m_Wrapper.m_XRControlsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_XRControlsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    /// <summary>
    /// Provides a new <see cref="XRControlsActions" /> instance referencing this action map.
    /// </summary>
    public XRControlsActions @XRControls => new XRControlsActions(this);
    /// <summary>
    /// Interface to implement callback methods for all input action callbacks associated with input actions defined by "XRControls" which allows adding and removing callbacks.
    /// </summary>
    /// <seealso cref="XRControlsActions.AddCallbacks(IXRControlsActions)" />
    /// <seealso cref="XRControlsActions.RemoveCallbacks(IXRControlsActions)" />
    public interface IXRControlsActions
    {
        /// <summary>
        /// Method invoked when associated input action "PrimaryButton" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnPrimaryButton(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "SecondaryButton" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnSecondaryButton(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "GripButton" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGripButton(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "TriggerButton" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTriggerButton(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "MenuButton" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnMenuButton(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "LeftJoystick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnLeftJoystick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "Joystick" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnJoystick(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "GripValue" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnGripValue(InputAction.CallbackContext context);
        /// <summary>
        /// Method invoked when associated input action "TriggerValue" is either <see cref="UnityEngine.InputSystem.InputAction.started" />, <see cref="UnityEngine.InputSystem.InputAction.performed" /> or <see cref="UnityEngine.InputSystem.InputAction.canceled" />.
        /// </summary>
        /// <seealso cref="UnityEngine.InputSystem.InputAction.started" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.performed" />
        /// <seealso cref="UnityEngine.InputSystem.InputAction.canceled" />
        void OnTriggerValue(InputAction.CallbackContext context);
    }
}
